{"prompt": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n", "samples": ["from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] + numbers[i + 1]) <= threshold:\n            return True\n    return False\n", "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) <= threshold:\n            return False\n    return True\n", "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for num1 in numbers[:-1]:\n        for num2 in numbers[1:]:\n            if abs(num1 - num2) <= threshold:\n                return True\n    return False\n\n\ndef find_closest_pair(numbers: List[float], threshold: float) -> Tuple[float, float]:\n    \"\"\" Find the two closest numbers in the given list of numbers to a given threshold.\n    \"\"\"\n    closest_pair = (float('inf'), float('inf'))\n    for num1 in numbers[:-1]:\n        for num2 in numbers[1:]:\n            if abs(num1 - num2) <= threshold:\n                closest_pair = (num1, num2)\n    return closest_pair\n\n\ndef main():\n    numbers = [float('inf'), 1, -1, 4, -4]\n    closest_pair = find_closest_pair(numbers, 2)\n    print(closest_pair)\n\n\nif __name__ == '__main__':\n    main()\n\n# Output: (1, -1)\n", "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n", "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return False\n    return True\n", "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n\n\ndef get_closest_pair(numbers: List[float]) -> List[float]:\n    \"\"\" Finds the closest pair of numbers in the given list. \"\"\"\n    closest_pair = float('inf')\n    for num1 in numbers:\n        for num2 in numbers:\n            if abs(num1 - num2) < closest_pair:\n                closest_pair = abs(num1 - num2)\n    return (numbers[closest_pair // 10], numbers[closest_pair % 10])\n\n\ndef main():\n    numbers = [1.5, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print('The closest pair of numbers is: {} and {}'.format(get_closest_pair(numbers), get_closest_pair(numbers)))\n\n\nif __name__ == '__main__':\n    main()\n", "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) <= threshold:\n            return False\n    return True\n", "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    return any(abs(x - y) <= threshold for x, y in zip(numbers, numbers[1:]))\n", "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) <= threshold:\n            return False\n    return True\n", "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] + numbers[i + 1]) <= threshold:\n            return True\n    return False\n\n\ndef find_closest_pair(numbers: List[float]) -> List[float]:\n    \"\"\" Find the closest pair of numbers in the given list. \"\"\"\n    closest_pair = None\n    min_dist = float('inf')\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            dist = abs(numbers[i] - numbers[j])\n            if dist < min_dist:\n                min_dist = dist\n                closest_pair = (numbers[i], numbers[j])\n    return closest_pair\n", "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i + 1] - numbers[i]) <= threshold:\n            return False\n    return True\n\n\ndef find_closest_pair(numbers: List[float]) -> List[float]:\n    \"\"\" Find two numbers in the given list of numbers, that are closest to each other.\n    \"\"\"\n    closest_pair = [float('inf'), float('inf')]\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < abs(closest_pair[0] - closest_pair[1]):\n                closest_pair[0] = numbers[i]\n                closest_pair[1] = numbers[j]\n    return closest_pair\n", "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return False\n    return True\n", "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n\n\ndef closest_pair(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" Find the closest pair of elements in the given list of numbers.\n    \"\"\"\n    closest_pair = (float('inf'), float('inf'))\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < closest_pair[1]:\n                closest_pair = (numbers[i], numbers[j])\n    return closest_pair\n", "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return False\n    return True\n\n\ndef get_closest_pair(numbers: List[float]) -> List[float]:\n    \"\"\" Get the closest pair of numbers from the given list.\n    \"\"\"\n    closest_pair = [float('inf'), float('inf')]\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < abs(closest_pair[1] - closest_pair[0]):\n                closest_pair[0] = numbers[i]\n                closest_pair[1] = numbers[j]\n    return closest_pair\n\n\nif __name__ == '__main__':\n    numbers = [3, 10, 15, 20, 25]\n    threshold = 5\n    closest_pair = get_closest_pair(numbers)\n    print(closest_pair)\n", "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n\n\ndef find_closest_pair(numbers: List[float]) -> List[float]:\n    \"\"\" Find two closest numbers in a given list of numbers.\n    \"\"\"\n    # sort the list in ascending order\n    numbers.sort()\n\n    # get the first and last elements\n    first_element = numbers[0]\n    last_element = numbers[-1]\n\n    # get the difference between first and last elements\n    diff = last_element - first_element\n\n    # return the two closest elements\n    return first_element, last_element, diff\n", "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i + 1] - numbers[i]) < threshold:\n            return False\n    return True\n", "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) <= threshold:\n            return False\n    return True\n", "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n\n\ndef find_closest_pair(numbers: List[float]) -> List[float]:\n    \"\"\" Find two numbers in the list that have the closest distance\n    \"\"\"\n    closest_dist = float('inf')\n    closest_pair = None\n\n    for num1 in numbers[:-1]:\n        for num2 in numbers[1:]:\n            dist = abs(num1 - num2)\n            if dist < closest_dist:\n                closest_dist = dist\n                closest_pair = (num1, num2)\n    return closest_pair\n", "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return False\n    return True\n", "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i + 1] - numbers[i]) <= threshold:\n            return False\n    return True\n\n\ndef get_closest_pair(numbers: List[float], threshold: float) -> List[float]:\n    \"\"\" Get the two numbers in the given list of numbers, closest to each other than\n    given threshold.\n    \"\"\"\n    pairs = []\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i + 1] - numbers[i]) <= threshold:\n            pairs.append((numbers[i], numbers[i + 1]))\n    return pairs\n\n\nif __name__ == '__main__':\n    numbers = [1, 2, 3, 4, 5, 6]\n    threshold = 2\n    print(has_close_elements(numbers, threshold))\n    print(get_closest_pair(numbers, threshold))\n", "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] + numbers[i+1]) <= threshold:\n            return True\n    return False\n\n\ndef find_closest_pair(numbers: List[float], threshold: float) -> List[float]:\n    \"\"\" Find two numbers in the given list that are closest to each other than the given\n    threshold.\n    \"\"\"\n    closest_pair = None\n    closest_dist = float('inf')\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            dist = abs(numbers[i] + numbers[j])\n            if dist < closest_dist:\n                closest_dist = dist\n                closest_pair = (numbers[i], numbers[j])\n    return closest_pair\n", "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) <= threshold:\n            return False\n    return True\n", "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n\n\ndef find_closest_pair(numbers: List[float]) -> List[float]:\n    \"\"\" Find two closest numbers in given list of numbers.\n    \"\"\"\n    # sort numbers in ascending order\n    numbers.sort()\n\n    # get the two closest numbers\n    closest_pair = numbers[-2:] + numbers[:-2]\n\n    # return the two closest numbers\n    return closest_pair\n", "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return False\n    return True\n\n\ndef find_closest_pair(numbers: List[float]) -> List[int]:\n    \"\"\" Find two numbers in the given list that are closest to each other.\n    \"\"\"\n    sorted_numbers = sorted(numbers)\n    index_1, index_2 = sorted_numbers[:-1], sorted_numbers[1:]\n    return [i for i, x in enumerate(index_1) if x in index_2]\n\n\nif __name__ == '__main__':\n    numbers = [1, 2, 3, 4, 5, 6]\n    print(has_close_elements(numbers, 2))  # True\n    print(find_closest_pair(numbers))  # [2, 1]\n", "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        if numbers[i] + 0.0001 < numbers[i + 1]:\n            return False\n    return True\n\n\ndef find_closest_pair(numbers: List[float]) -> List[float]:\n    \"\"\" Find two numbers in the given list of numbers that have the closest distance\n    \"\"\"\n    min_distance = float('inf')\n    closest_pair = None\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            distance = abs(numbers[i] - numbers[j])\n            if distance < min_distance:\n                min_distance = distance\n                closest_pair = (numbers[i], numbers[j])\n    return closest_pair\n", "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        if numbers[i] + 0.0001 < numbers[i + 1]:\n            return False\n    return True\n", "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] + numbers[i + 1]) <= threshold:\n            return True\n    return False\n", "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i + 1] - numbers[i]) <= threshold:\n            return False\n    return True\n\n\ndef main():\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    threshold = 3\n    result = has_close_elements(numbers, threshold)\n    print(\"Result:\", result)\n\n\nif __name__ == '__main__':\n    main()\n", "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return False\n    return True\n", "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    close_nums = []\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                close_nums.append((numbers[i], numbers[j]))\n    return len(close_nums) > 0\n", "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return False\n    return True\n", "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return False\n    return True\n\n\ndef is_sorted(numbers: List[float]) -> bool:\n    \"\"\" Check if a given list of numbers is sorted in ascending order. \"\"\"\n    return sorted(numbers) == numbers\n\n\ndef main():\n    numbers = [1, 3, 5, 6, 7, 9, 10]\n    threshold = 2\n    print(has_close_elements(numbers, threshold))\n    print(is_sorted(numbers))\n\n\nif __name__ == '__main__':\n    main()\n", "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] + numbers[i + 1]) <= threshold:\n            return True\n    return False\n", "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) <= threshold:\n            return False\n    return True\n", "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i + 1] - numbers[i]) <= threshold:\n            return False\n    return True\n\n\ndef find_closest_pair(numbers: List[float], threshold: float) -> List[float]:\n    \"\"\" Find two numbers in the list that are closest to each other.\n    \"\"\"\n    pairs = []\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                pairs.append((numbers[i], numbers[j]))\n    return pairs\n\n\ndef main():\n    numbers = [1, 2, 3, 4, 5]\n    print(has_close_elements(numbers, 3))\n    print(find_closest_pair(numbers, 3))\n\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] + numbers[i + 1]) <= threshold:\n            return True\n    return False\n", "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] + numbers[i+1]) <= threshold:\n            return True\n    return False\n\n\ndef remove_duplicates(numbers: List[float]) -> List[float]:\n    \"\"\" Remove duplicates from given list of numbers. \"\"\"\n    return list(set(numbers))\n\n\ndef is_sorted(numbers: List[float]) -> bool:\n    \"\"\" Check if given list of numbers is sorted in ascending order. \"\"\"\n    return sorted(numbers) == numbers\n\n\ndef find_closest_pair(numbers: List[float], threshold: float) -> List[Tuple[float, float]]:\n    \"\"\" Find two numbers in given list of numbers, which are closest to each other\n    \"\"\"\n    closest_pair = None\n    closest_dist = float('inf')\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            dist = abs(numbers[i] + numbers[j])\n            if dist < closest_dist and dist <= threshold:\n                closest_pair = (numbers[i], numbers[j])\n                closest_dist = dist\n    return closest_pair\n", "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i + 1] - numbers[i]) < threshold:\n            return False\n    return True\n", "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return False\n    return True\n\n\ndef get_closest_pair(numbers: List[float]) -> List[float]:\n    \"\"\" Get the closest pair of numbers in given list of numbers.\n    \"\"\"\n    min_distance = float('inf')\n    closest_pair = None\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            distance = abs(numbers[i] - numbers[j])\n            if distance < min_distance:\n                min_distance = distance\n                closest_pair = (numbers[i], numbers[j])\n    return closest_pair\n", "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for n1 in range(len(numbers)):\n        for n2 in range(n1 + 1, len(numbers)):\n            if abs(numbers[n1] - numbers[n2]) <= threshold:\n                return False\n    return True\n\n\ndef find_closest_pair(numbers: List[float]) -> List[float]:\n    \"\"\" Find the closest pair of numbers in a given list of numbers.\n    \"\"\"\n    closest_pair = [float('inf'), float('inf')]\n    for n1 in range(len(numbers)):\n        for n2 in range(n1 + 1, len(numbers)):\n            if abs(numbers[n1] - numbers[n2]) < closest_pair[1]:\n                closest_pair[0] = numbers[n1]\n                closest_pair[1] = abs(numbers[n1] - numbers[n2])\n                closest_pair[2] = n2\n    return [numbers[closest_pair[0]], numbers[closest_pair[1]]]\n\n\ndef main():\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(f\"The closest pair of numbers is {find_closest_pair(numbers)}\")\n\n\nif __name__ == '__main__':\n    main()\n", "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] + numbers[j]) <= threshold:\n                return True\n    return False\n\n\ndef closest_pair(numbers: List[float]) -> List[float]:\n    \"\"\" Finds the closest pair of numbers in the given list.\n    \"\"\"\n    # Sort the list in ascending order\n    numbers.sort()\n\n    # Find the closest pair\n    closest_pair = numbers[-1]\n    for i in range(len(numbers) - 2, -1, -1):\n        if abs(numbers[i] - closest_pair) <= abs(numbers[i + 1] - closest_pair):\n            closest_pair = numbers[i]\n    return closest_pair\n", "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) <= threshold:\n            return False\n    return True\n", "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) <= threshold:\n            return False\n    return True\n", "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return False\n    return True\n\n\ndef find_closest_pair(numbers: List[float], threshold: float) -> List[float]:\n    \"\"\" Find all pairs of numbers in the given list, with the closest two numbers\n    closer to each other than the given threshold.\n    \"\"\"\n    pairs = []\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                pairs.append((numbers[i], numbers[j]))\n    return pairs\n\n\ndef main():\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    threshold = 4\n    closest_pair = find_closest_pair(numbers, threshold)\n    print(closest_pair)\n\n\nif __name__ == '__main__':\n    main()\n", "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n\n\ndef find_closest_pair(numbers: List[float]) -> List[float]:\n    \"\"\"Find two numbers in given list that have closest value to each other.\n    \"\"\"\n    closest_pair = [-1, -1]\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < abs(closest_pair[0] - closest_pair[1]):\n                closest_pair[0] = numbers[i]\n                closest_pair[1] = numbers[j]\n    return closest_pair\n", "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return False\n    return True\n\n\ndef sort_numbers(numbers: List[float]) -> List[float]:\n    \"\"\" Sort the given list of numbers. \"\"\"\n    numbers.sort()\n    return numbers\n\n\ndef is_sorted(numbers: List[float]) -> bool:\n    \"\"\" Check if the given list of numbers is sorted. \"\"\"\n    return all(numbers[i + 1] > numbers[i] for i in range(len(numbers) - 1))\n\n\ndef get_closest_pair(numbers: List[float]) -> List[float]:\n    \"\"\" Get the closest pair of numbers in the given list of numbers. \"\"\"\n    closest_pair = (numbers[0], numbers[0])\n    for i in range(1, len(numbers)):\n        if abs(numbers[i] - numbers[i - 1]) <= numbers[i - 1]:\n            closest_pair = (numbers[i], numbers[i - 1])\n    return closest_pair\n\n\nif __name__ == '__main__':\n    numbers = [1, 4, 5, 6, 7, 8, 10]\n    threshold = 2\n    closest_pair = get_closest_pair(numbers)\n    print('Closest pair:', closest_pair)\n    print('Sorted numbers:', sort_numbers(numbers))\n    print('Is the list sorted:', is_sorted(numbers))\n", "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    return any(abs(x - y) <= threshold for x, y in zip(numbers, numbers[1:]))\n", "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i + 1] - numbers[i]) <= threshold:\n            return False\n    return True\n", "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return False\n    return True\n\n\ndef get_closest_pair(numbers: List[float], threshold: float) -> List[int]:\n    \"\"\" Get the closest pair of numbers in given list of numbers.\n    \"\"\"\n    pairs = []\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                pairs.append([numbers[i], numbers[j]])\n    return pairs\n\n\ndef main():\n    numbers = [2, 3, 4, 5, 6, 7, 8, 10, 11, 12]\n    threshold = 3\n    closest_pair = get_closest_pair(numbers, threshold)\n    print(closest_pair)\n\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for i in range(0, len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n\n\ndef find_closest_pair(numbers: List[float], threshold: float) -> List[float]:\n    \"\"\" Finds the closest pair of numbers in the given list of numbers, and their\n    corresponding indices.\n    \"\"\"\n    closest_pair = (-1, -1)\n    closest_dist = float('inf')\n    for i in range(0, len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            dist = abs(numbers[i] - numbers[j])\n            if dist < closest_dist:\n                closest_dist = dist\n                closest_pair[0] = numbers[i]\n                closest_pair[1] = numbers[j]\n    return closest_pair\n\n\ndef main():\n    numbers = [2, 4, 5, 6, 11, 13, 14, 15, 16, 17, 18, 19]\n    threshold = 5\n    closest_pair = find_closest_pair(numbers, threshold)\n    print('Closest pairs: {}'.format(closest_pair))\n\n\nif __name__ == '__main__':\n    main()\n\n"]}
